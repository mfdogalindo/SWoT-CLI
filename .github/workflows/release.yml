name: Release Binaries

on:
  release:
    types: [created]

jobs:
  release:
    name: Release - ${{ matrix.platform.os }}
    runs-on: ${{ matrix.platform.os }}
    permissions:
      contents: write
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_path: target/x86_64-unknown-linux-gnu/release
            asset_name: swot_cli-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_path: target/x86_64-pc-windows-msvc/release
            asset_name: swot_cli-windows-amd64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_path: target/x86_64-apple-darwin/release
            asset_name: swot_cli-macos-amd64
            pkg_name: swot_cli-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_path: target/aarch64-apple-darwin/release
            asset_name: swot_cli-macos-arm64
            pkg_name: swot_cli-macos-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Install dependencies (Ubuntu)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev

      - name: Setup macOS cross-compilation
        if: matrix.platform.target == 'aarch64-apple-darwin'
        run: |
          sudo xcode-select -s /Applications/Xcode.app

      - name: Setup Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.platform.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        if: matrix.platform.target == 'aarch64-apple-darwin'
        run: |
          SDKROOT=$(xcrun -sdk macosx --show-sdk-path) \
          MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version) \
          cargo build --release --target ${{ matrix.platform.target }}
        shell: bash
        env:
          CARGO_TERM_COLOR: always

      - name: Build release binary
        if: matrix.platform.target != 'aarch64-apple-darwin'
        run: cargo build --release --target ${{ matrix.platform.target }}
        env:
          CARGO_TERM_COLOR: always

      - name: Prepare package directory
        shell: bash
        run: |
          mkdir -p "package/${{ matrix.platform.pkg_name || matrix.platform.asset_name }}"
          cp -r Resources "package/${{ matrix.platform.pkg_name || matrix.platform.asset_name }}/"
          if [ "${{ matrix.platform.os }}" = "windows-latest" ]; then
            cp "${{ matrix.platform.binary_path }}/swot_cli.exe" "package/${{ matrix.platform.asset_name }}/"
          else
            cp "${{ matrix.platform.binary_path }}/swot_cli" "package/${{ matrix.platform.pkg_name || matrix.platform.asset_name }}/"
          fi

      - name: Create Linux package
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          cd package
          tar -czf "../${{ matrix.platform.asset_name }}.tar.gz" "${{ matrix.platform.asset_name }}"

      - name: Create Windows package
        if: matrix.platform.os == 'windows-latest'
        run: |
          Compress-Archive -Path "package/${{ matrix.platform.asset_name }}/*" -DestinationPath "${{ matrix.platform.asset_name }}.zip"

      - name: Create macOS package
        if: runner.os == 'macOS'
        run: |
          cd package
          hdiutil create -volname "${{ matrix.platform.pkg_name }}" \
            -srcfolder "${{ matrix.platform.pkg_name }}" \
            -ov -format UDZO \
            "../${{ matrix.platform.pkg_name }}.dmg"

      - name: Upload package
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.zip
            *.tar.gz
            *.dmg